{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Doing Geospatial in Python","text":"<p>With a low barrier to entry and large ecosystem of tools and libraries, Python is the lingua franca for geospatial. Whether you are doing data acquisition, processing, publishing, integration, analysis or software development, there is no shortage of solid Python tools to assist you in your daily workflows.</p> <p>This workshop will provide an introduction to performing common GIS/geospatial tasks using Python geospatial tools such as OWSLib, Shapely, Fiona/Rasterio, and common geospatial libraries like GDAL, PROJ, pycsw, as well as other tools from the geopython toolchain. Manipulate vector/raster data using Shapely, Fiona and Rasterio. Publish data and metadata to OGC APIs using pygeoapi, pygeometa, pycsw, and more. Visualize your data on a map using Folium, Bokeh and more. Plus a few extras in between!</p> <p>The workshop is provided using the Jupyter Notebook environment with Python 3.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>The workshop uses Jupyter Notebooks.  Jupyter is an interactive development environment suitable for documenting and reproducing workflows using live code.</p> <p>As the installation of all dependencies on all platforms (Windows, Mac, Linux) can be quite involved and complex this workshop provides all components  within a Docker Image.</p> <p>In addition, geospatial web services like pygeoapi and pycsw in this workshop are provided by Docker images.</p> <p>The core requirement is to have Docker and Docker Compose installed on the system.  Once you have Docker and Docker Compose installed you will be able to install and run the workshop without any other dependencies.</p> <p>More information on installing Docker can also be found here.</p>"},{"location":"#optional-requirements","title":"Optional requirements","text":"<p>Users may optionally install QGIS as a GIS data viewer. QGIS is a free and open-source cross-platform desktop geographic information system application that supports viewing, editing, and analysis of geospatial data.</p>"},{"location":"#data","title":"Data","text":"<p>The workshop provides various sample data to illustrate Python geospatial functionality which has been tested to cover the workshop requirements.</p> <p>Having said this, please feel free to bring your own! Examples:</p> <ul> <li>data: basically anything that can be read with GDAL</li> <li>metadata: ISO, FGDC, Dublin Core, OGC API - Records, STAC  or even pygeometa MCF files</li> </ul>"},{"location":"#verifying-your-environment","title":"Verifying your environment","text":"<p>Ensure Docker is running on your computer, then verify that the <code>docker</code> and <code>docker-compose</code> commands are working and available:</p> <pre><code>$ docker version\n\n$ docker-compose --version\n</code></pre> <p>If <code>docker-compose</code> gives a 'program not found' error:</p> <p>In recent versions of Docker the Docker Compose program is part of the Docker CLI, thus following the <code>docker &lt;cmd&gt;</code> pattern.  If <code>docker-compose --version</code> as above fails for you,  try <code>docker compose version</code> (all spaces). If the latter command works then use <code>docker compose</code> where the text shows <code>docker-compose</code>. Note that our main Bash script <code>geopython-workshop-ctl.sh</code> (see below) will figure out which variant you have installed and call the prober Docker Compose command.</p>"},{"location":"#installation","title":"Installation","text":"<p>Below we will download and run the workshop content.</p> <pre><code>curl -O https://codeload.github.com/geopython/geopython-workshop/zip/master\nunzip master\ncd geopython-workshop-master/workshop\n\n// start the workshop\n\n./geopython-workshop-ctl.sh start\n\n// display URL and open in default web browser\n\n./geopython-workshop-ctl.sh url\n\n// stop workshop\n\n./geopython-workshop-ctl.sh stop\n</code></pre> <p>If the above <code>.sh</code> script does not work on your system  you can execute <code>docker-compose</code> directly via:</p> <pre><code>// in dir geopython-workshop-master/workshop\ndocker-compose up -d\ndocker logs --follow geopython-workshop-jupyter\n// look for URL+Token and Copy/Paste in browser\n</code></pre> <p>Below are utility commands. Use when stopped to clean and update.</p> <pre><code>// update the workshop Docker Images in case of new versions\n\n./geopython-workshop-ctl.sh update\n\n// clean your Docker environment from dangling Images/Containers\n// (does not remove the workshop's images, only obsolete ones)\n\n./geopython-workshop-ctl.sh clean\n</code></pre>"},{"location":"#installation-issues","title":"Installation Issues","text":"<p>Docker installed but problems installing/running the workshop? Below some tips:</p>"},{"location":"#download-problems","title":"Download Problems","text":"<p>Although <code>curl</code> may be on your system it may have problems with SSL (one user noted using OSGeo4W). In that case you can add the <code>--insecure</code> commandline option or copy/paste the download URL in your browser and download from there.</p>"},{"location":"#filedrive-sharing","title":"File/Drive Sharing","text":"<p>The workshop setup involves Docker Volume Mounting. For Mac OS and Windows installs be sure to enable File/Drive Sharing within Docker Desktop for the directory where you unzipped the workshop. Go to the <code>Preferences/Settings | File Sharing...</code>  menu and make settings accordingly.</p>"},{"location":"#running-in-virtualbox","title":"Running in VirtualBox","text":"<p>You may also run a VirtualBox VM with preferably Ubuntu, install Docker there and run the workshop. Even better if you use Vagrant to provision/manage your VM. You could even unpack the .zip file on your local machine and mount it within the VM, start the workshop there.</p> <p>In any case, in order to access the services from your local machine, you need to do port mapping from ports within the VM to your local machine in order to access the workshop from your local browser. The following ports need to be mapped from the VirtualBox VM to your local system:  8888 (Jupyter), 5000 (pygeoapi) and 8001 (pycsw) .</p> <p>You will possibly need to enable firewall access for these ports within your VM. Do this as follows:</p> <pre><code>sudo ufw allow 8888/tcp\nsudo ufw allow 5000/tcp\nsudo ufw allow 8001/tcp\n</code></pre> <p>Within VirtualBox menu you can then map these ports to the same ports on your local system, so the workshop is accessed with your local browser via <code>http://127.0.0.1:8888?token=...</code>, <code>http://127.0.0.1:5000</code> etc.</p>"},{"location":"#running-docker-with-privileged-user-in-linux","title":"Running Docker with privileged user in Linux","text":"<p>Currently, the workshop doesn't support a docker installation that needs the <code>sudo</code> command to run Docker. The following post-installation step in the Docker documentation must be performed before running our script to start the workshop.</p>"},{"location":"#cannot-access-url","title":"Cannot Access URL","text":"<p>The workshop should run on <code>http://127.0.0.1:8888?token=&lt;token&gt;</code> but in some cases this may not work. In that case you could also try <code>http://0.0.0.0:8888?token=&lt;token&gt;</code>.</p>"},{"location":"#macos-monterey-issue","title":"MacOS Monterey issue","text":"<p>There is an issue with MacOS Monterey where the port 5000 is already used and therefore conflicting with that one used by pygeoapi. If you are facing this error <code>OSError: [Errno 48] Address already in use</code> then your machine is affected. To overcome the issue you can disable the Airplay Receiver from <code>System Preferences-&gt;Sharing</code> of your MacOS (detailed description in this blog post).</p>"},{"location":"#no-docker-installed","title":"No Docker Installed?","text":"<p>If you somehow were not able to install Docker: there is a Cloud version of the Jupyter-Notebook-part of the workshop via \"Jupyter Binder\".</p> <p>With some limits (e.g. no local geo-services, no data publication), you can follow most of the workshop using a remote Docker instance within your browser via \"Jupyter Binder\". Click on the button below to launch the Workshop Binder Instance. Startup takes a while, be patient...</p> <p></p> <p>Additional notes for Binder session:</p> <ul> <li>session timeout is about 10 minutes, if that happens, refreshing the page will not help, you need to start a new session using the button above</li> </ul>"},{"location":"#support","title":"Support","text":"<p>A Gitter channel exists for discussion and live support from the developers of the workshop.</p>"},{"location":"#bugs-and-issues","title":"Bugs and Issues","text":"<p>All bugs, enhancements and issues can be reported on GitHub.</p>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#about-docker","title":"About Docker","text":"<p>Docker has been available for almost 10 years, and provided as a deployment option on numerous FOSS software and OSGeo projects. Given the current era of computing, chances are that you have heard of Docker and containerization. Or, perhaps are already familiar and hopefully using Docker already. If not, there is a wide array of introductory materials that can be found online like this tutorial from IBM.</p> <p>FOSS4G software has benefitted greatly from Docker (consistent packaging, isolation, integration and upgrade patterns) in comparison to custom installations. Though today we mainly use Docker, the bigger picture is the use of Containers as a next step in virtualization. Containerization certainly deserves its own workshop, so for the purpose of this workshop we cover the basics of Docker and Docker Compose.</p> <p>Docker Compose is an addition to Docker to facilitate the orchestration (configuration) of one or more Docker 'Containers' (a Container is a running instance of a Docker image) using a configuration convention (the Docker Compose YAML file), usually named <code>docker-compose.yml</code>.</p> <p>Stepping up further are even more sophisticated Docker orchestrators like  Rancher and Kubernetes, but for this workshop, Docker and Docker Compose are all we need.</p>"},{"location":"docker/#installation","title":"Installation","text":"<p>Docker installation has greatly progressed over the years. This is the only part of the workshop which is dependent on the system/OS you are running (e.g. Windows, Mac or Linux). For each system the Docker website provides detailed installation instructions.  Please follow these consistently.</p> <p>Docker Compose in older (pre Compose v2) versions was a separate (Python) program to install, though it was usually present in Docker Desktop.  The <code>docker compose</code> command in that case is <code>docker-compose</code> (hyphened). Since 2021, Docker Desktop includes Compose in the Docker CLI. The command is then <code>docker compose</code> (space).</p> <p>In our texts we will use <code>docker-compose</code>. Depending on your installation you may need to replace the hyphen (<code>-</code>) with a space. But you can always install the original compose (<code>docker-compose</code>) via <code>pip install docker-compose</code>.</p> <p>For many platforms a product called <code>Docker Desktop</code> is available, which includes <code>Docker Compose</code>:</p> <ul> <li>Windows installation</li> <li>Mac installation</li> <li>Linux installation</li> </ul> <p>Some notes:</p> <ul> <li>On Windows we recommend using the Windows Subsystem for Linux (WSL) as it also provides a powerful (Bash) command line and has optimal integration with Docker</li> <li>On Mac, if you are using Homebrew, consider (as the author has) using the brew Docker formula</li> <li>On Linux, you can choose the relevant installer for your platform. You can also use Virtualbox with a Ubuntu Image or use a cloud VM</li> <li>Docker desktop includes a graphical user interface with some interesting options. You can see logs and information about running containers, open their service in a browser or even open a terminal inside the container</li> </ul> <p>If all goes well, you should be able to run Docker from the command line as follows: [^2]</p> <pre><code>$ docker --version\nDocker version 20.10.17, build 100c701\n$ docker-compose --version  \nDocker Compose version v2.6.1\n</code></pre>"}]}